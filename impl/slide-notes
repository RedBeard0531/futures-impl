Executor model:
 1) type-erased?
 2) only provided for .get()/.wait()/.then()?
 3) encoded in the type? std2::future<Executor, Ts...>

Propagated? (2) doesn't support this.

(1) interface boundaries easy, no dependency on the executor in any place
(2) doesn't touch futures on interface boundaries at all, used specifically when necessary
(3) puts executors in the interface, might need a type-erased variant for interacting across libraries
to avoid constant recompilations of different libraries that interact with each other

(3) eliminates the need for a special shared-but-not-thread-safe by having a statically resolved property
of the executor specifying whether the executor is running on multiple threads or not


Needed future types:
 - lock-free unique future, single set, single consume
   * forkable?
   * can be turned into the shared futures?
 - shared, thread safe future
 - shared-but-not-thread-safe future that might not be needed if we go with (3), but still needed with (3)
   if you want to executor-erase it at the interface level and provide a guarantee of no synchronization


.then() can work without executors, with the danger of running into effectively infinite recursion; gets
better with executors

.get() and .wait() is dependent on the executor, because the synchronization mechanism explicitly depends
on where the producer and the consumer are running (ordinary semaphore doesn't work well on a fiber, for
example)


Cancellation can be provided (and these are not exclusive):
 - implicitly, when the future's destructor runs
 - explicitly, by providing ".cancel()"

Implicit cancellation needs a .defer() to ensure the execution even when all the futures die.

Cancellation can be achieved by just unrefing the shared state, and the "packaged task" can try to lock
its own weak_ptr to the shared state. .defer() just keeps a reference to the shared state so that the
unref from the last future doesn't kill the shared state.

Need a cancellation policy thing, primarily for debugging, but other uses probably also possible. Make
it provide a function to call on cancellation. Possibly also provide a terminating cancellation policy?

